#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

resource_dir=$(dirname $0)

export TMPDIR=/tmp

# Read inputs
payload=$(mktemp $TMPDIR/request-payload.XXXXXX)
cat > $payload <&0

source $resource_dir/init.sh

package_path=$(jq -r '.params.path //empty' < $payload)
version_file=$(jq -r '.params.version //empty' < $payload)

[ -z "$package_path" ] && (>&2 echo 'params.path is not configured') && exit 1
[ ! -f "${1}/${package_path}/package.json" ] && (>&2 echo 'params.path does not contain a package.json') && exit 1
[ -n "$version_file" ] && [ ! -f "${1}/${version_file}" ] && (>&2 echo 'params.version is provided but does not point to a version file') && exit 1
[ -n "$version_file" ] && version_file="${1}/${version_file}"

cd "${1}/${package_path}"

manifestName="$(jq -r '.name' < package.json)"

[ "@${scope}/${package}" != "${manifestName}" ] && (>&2 echo 'package name resource definition and package.json do not match') && exit 1

current_version=$(jq -r '.version' < package.json)
[ -n "$version_file" ] && npm version "$(<$version_file)" --allow-same-version
version=$(jq -r '.version' < package.json)

publish_result_file=$(mktemp $TMPDIR/publish-result.XXXXXX)
npm publish 2>&1 | tee $publish_result_file

jq -M -n --arg version $version '{version: {version: $version}}' >&3